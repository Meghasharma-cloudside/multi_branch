name: CD - Build & Deploy to ECS

permissions:
  id-token: write
  contents: read


on:
  push:
    branches:
      - main
      - staging
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 🔹 Checkout source
      - name: Checkout source
        uses: actions/checkout@v4

      # 🔹 Configure AWS credentials using OIDC (no static keys)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::004642588605:role/github-ecs-deploy-role
          aws-region: us-east-2

      # 🔹 Set environment-specific variables
      - name: Set deployment environment
        run: |
          BRANCH="${GITHUB_REF##*/}"

          if [[ "$BRANCH" == "main" ]]; then
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER=prod-cluster" >> $GITHUB_ENV
            echo "SERVICE=prod-service" >> $GITHUB_ENV
            echo "ECR_REPO=app-prod" >> $GITHUB_ENV
            echo "TASKDEF_FILE=task-definition/prodtd.json" >> $GITHUB_ENV
            echo "SECRET_NAME=prod/app-secrets" >> $GITHUB_ENV

          elif [[ "$BRANCH" == "staging" ]]; then
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER=staging-cluster" >> $GITHUB_ENV
            echo "SERVICE=staging-service" >> $GITHUB_ENV
            echo "ECR_REPO=app-staging" >> $GITHUB_ENV
            echo "TASKDEF_FILE=task-definition/stagingtd.json" >> $GITHUB_ENV
            echo "SECRET_NAME=staging/app-secrets" >> $GITHUB_ENV

          elif [[ "$BRANCH" == "dev" ]]; then
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER=dev-cluster" >> $GITHUB_ENV
            echo "SERVICE=dev-service" >> $GITHUB_ENV
            echo "ECR_REPO=app-dev" >> $GITHUB_ENV
            echo "TASKDEF_FILE=task-definition/devtd.json" >> $GITHUB_ENV
            echo "SECRET_NAME=dev/app-secrets" >> $GITHUB_ENV

          else
            echo "❌ ERROR: Invalid branch '$BRANCH'. Allowed branches are: main, staging, dev."
            exit 1
          fi

      # 🔹 Load secrets from AWS Secrets Manager
      - name: Load secrets from AWS Secrets Manager
        run: |
          SECRETS_JSON=$(aws secretsmanager get-secret-value \
            --secret-id $SECRET_NAME \
            --query SecretString --output text)

          for row in $(echo "${SECRETS_JSON}" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]'); do
            echo "$row" >> $GITHUB_ENV
          done

      # 🔹 Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 🔹 Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          COMMIT_ID=$(git rev-parse --short HEAD)
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$COMMIT_ID
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # 🔹 Render ECS task definition with the new image
      - name: Render new ECS task definition
        run: |
          sed "s|<IMAGE>|${IMAGE_URI}|g" $TASKDEF_FILE > ecs-taskdef.json

      # 🔹 Register ECS Task Definition
      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://ecs-taskdef.json

      # 🔹 Update ECS Service
      - name: Update ECS Service
        run: |
          FAMILY=$(jq -r '.family' ecs-taskdef.json)
          REVISION=$(aws ecs describe-task-definition --task-definition $FAMILY \
                        --query 'taskDefinition.revision' --output text \
                        --region $AWS_REGION)
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $SERVICE \
            --task-definition ${FAMILY}:${REVISION} \
            --region $AWS_REGION

