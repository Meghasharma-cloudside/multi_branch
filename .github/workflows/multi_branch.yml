name: CD - Build & Deploy to ECS

on:
  push:
    branches:
      - main
      - staging
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # ðŸ”¹ Set environment-specific variables
      - name: Set deployment environment
        run: |
          BRANCH="${GITHUB_REF##*/}"

          if [[ "$BRANCH" == "main" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER=prod-cluster" >> $GITHUB_ENV
            echo "SERVICE=prod-service" >> $GITHUB_ENV
            echo "ECR_REPO=app-prod" >> $GITHUB_ENV
            echo "TASKDEF_FILE=task-definition/prodtd.json" >> $GITHUB_ENV

          elif [[ "$BRANCH" == "staging" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER=staging-cluster" >> $GITHUB_ENV
            echo "SERVICE=staging-service" >> $GITHUB_ENV
            echo "ECR_REPO=app-staging" >> $GITHUB_ENV
            echo "TASKDEF_FILE=task-definition/stagingtd.json" >> $GITHUB_ENV

          else
            echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
            echo "CLUSTER=dev-cluster" >> $GITHUB_ENV
            echo "SERVICE=dev-service" >> $GITHUB_ENV
            echo "ECR_REPO=app-dev" >> $GITHUB_ENV
            echo "TASKDEF_FILE=task-definition/devtd.json" >> $GITHUB_ENV
          fi

      # ðŸ”¹ Configure AWS credentials dynamically
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ðŸ”¹ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ðŸ”¹ Build and push image
      - name: Build and Push Docker Image
        run: |
          COMMIT_ID=$(git rev-parse --short HEAD)
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$COMMIT_ID
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # ðŸ”¹ Render correct ECS task definition
      - name: Render new ECS task definition
        run: |
          sed "s|<IMAGE>|${IMAGE_URI}|g" $TASKDEF_FILE > ecs-taskdef.json

      # ðŸ”¹ Register ECS Task Definition
      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://ecs-taskdef.json

      # ðŸ”¹ Update ECS Service
      - name: Update ECS Service
        run: |
          FAMILY=$(jq -r '.family' ecs-taskdef.json)
          REVISION=$(aws ecs describe-task-definition --task-definition $FAMILY \
                        --query 'taskDefinition.revision' --output text \
                        --region $AWS_REGION)
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $SERVICE \
            --task-definition ${FAMILY}:${REVISION} \
            --region $AWS_REGION
